use crate::ecdsa::{PublicKey, Scalar48, Secp384r1Curve, Signature};
use crate::uart::UartController;
use embedded_io::Write;
use proposed_traits::digest::DigestAlgorithm;
use proposed_traits::ecdsa::{Curve, EcdsaVerify};

use hex_literal::hex;

pub struct EcdsaTestVec {
    pub qx: [u8; 48],
    pub qy: [u8; 48],
    pub r: [u8; 48],
    pub s: [u8; 48],
    pub m: [u8; 48],
    pub result: bool,
}

pub const SECP384R1_TESTVEC: &[EcdsaTestVec] = &[
    EcdsaTestVec {
        qx: hex!("3BF701BC9E9D36B4D5F1455343F09126F2564390F2B487365071243C61E6471FB9D2AB74657B82F9086489D9EF0F5CB5"),
        qy: hex!("D1A358EAFBF952E68D533855CCBDAA6FF75B137A5101443199325583552A6295FFE5382D00CFCDA30344A9B5B68DB855"),
        r:  hex!("30EA514FC0D38D8208756F068113C7CADA9F66A3B40EA3B313D040D9B57DD41A332795D02CC7D507FCEF9FAF01A27088"),
        s:  hex!("691B9D4969451A98036D53AA725458602125DE74881BBC333012CA4FA55BDE39D1BF16A6AAE3FE4992C567C6E7892337"),
        m:  hex!("F492B9EB18A06F7AA479953B31C34FBFFCF42A7427B5D2EFF045DD6162B24BCC37DA1AA7725ED71A650EAB7DE758FEFF"),
        result: true,
    },
    EcdsaTestVec {
        qx: hex!("0CED3579939EE2DFCE586A88A08DA780F08E4B8AD36F9E087E39105D2DA3A628C301655CB0BE9F3646A10D09EC01DE3C"),
        qy: hex!("28E3930D153B9202AB3709F97342C4CCCF456D54F1847F55FD9FAAACE95823DDE03A619BA9C7F4A1B51BB994027BE678"),
        r:  hex!("8637948DCAF42CE1410A8A918DD41C324AF02ACC6517D262BA1A8C1FAE372475F4496E0E861C2F8F634CE088BC7FD51C"),
        s:  hex!("DDF9B8D0A5B1761CBEC6B67677169E8440AA23E50B23375BCDF35351E1EC9447040D890CFCBABE9700B8897C1F2C04F8"),
        m:  hex!("60A13BCEF15E5FD87DAB1BA5643226B078C756E99A29C0935C60F6646EEEF24B7E59ED04A794B77C21741B6F50C188F9"),
        result: false,
    },
    EcdsaTestVec {
        qx: hex!("DBF62BC8712AF5C784CAB581965D9B76DC846EA45B4A584AE5AD863C99C189DB2A7CA3972F6680275EC665B26C93226E"),
        qy: hex!("B963FED1D545C4446FAF622F4267243EF11FCC9B343F03C7F63BD3D85EE33F0CAB8F5143692F58CC78DB10343C6F7908"),
        r:  hex!("91D9B5E4E0E80205D5C841D8D2B9397FE8C2D75BD3CF7DB4390B5B4C45CB6E25166D9E68B35696B37D47D6F3F0C333B3"),
        s:  hex!("717A6C8328E27872CE7FE00B64242B0C1B9C61A24A7DC15AC0C4A0C48637BF2423ADD06C4E7D5038A3B743D72CADFBE1"),
        m:  hex!("7F251A65ACBE92AF4C6A6D624C0860D9BE77329E10E5BEB3B9594F7916128CD95610A4D84E3A83A24A72362F6C8F9C46"),
        result: true,
    },
    EcdsaTestVec {
        qx: hex!("DBF62BC8712AF5C784CAB581965D9B76DC846EA45B4A584AE5AD863C99C189DB2A7CA3972F6680275EC665B26C93226E"),
        qy: hex!("B963FED1D545C4446FAF622F4267243EF11FCC9B343F03C7F63BD3D85EE33F0CAB8F5143692F58CC78DB10343C6F7908"),
        r:  hex!("91D9B5E4E0E80205D5C841D8D2B9397FE8C2D75BD3CF7DB4390B5B4C45CB6E25166D9E68B35696B37D47D6F3F0C333B3"),
        s:  hex!("717A6C8328E27872CE7FE00B64242B0C1B9C61A24A7DC15AC0C4A0C48637BF2423ADD06C4E7D5038A3B743D72CADFBE1"),
        m:  hex!("7F251B65ACBE92AF4C6A6D624C0860D9BE77329E10EFBEB3B9594F7916128CD95610A4D84E3A83A24A72362F6C8F9C46"),
        result: false,
    },
    EcdsaTestVec {
        qx: hex!("1AD83682D882D40727DF3B99366D7FDC482C413CDABE3152AA515AB259B4F931EEF3A515ECB2FA3E7DBE5A7DACF15E3D"),
        qy: hex!("2035A716BAA55B01E94004EFF67F9C1FDECC19631E6906AFFB68A461F373C197044D0754CA6F2ED62047B1138A23364F"),
        r:  hex!("0FDF89B5C84A0AD7CBB1824F976D26EDBB7492C741F26F05FD387E7A7DB40E81B08CBB3AE81D5B286F6040957267479E"),
        s:  hex!("11D5E975F0A3EAA0F7843980B24771B3B255A1499281F455461CB291802429342619012B7A6EDE470E32F1C1CC5FA845"),
        m:  hex!("346A3BB4815FFB17A53B6A253345CF3DECC0AAAF7D53974125C90B68C7DB45CE0BA635C0EEEA80616AEE2AA7CE7966B4"),
        result: true,
    },
    EcdsaTestVec {
        qx: hex!("CAD83682D882D40727DF3B99366D7FDC482C413CDABE3152AA515AB259B4F931EEF3A515ECB2FA3E7DBE5A7DACF15E3D"),
        qy: hex!("2035A716BAA55B01E94004EFF67F9C1FDECC19631E6906AFFB68A461F373C197044D0754CA6F2ED62047B1138A23364F"),
        r:  hex!("0FDF89B5C84A0AD7CBB1824F976D26EDBB7492C741F26F05FD387E7A7DB40E81B08CBB3AE81D5B286F6040957267479E"),
        s:  hex!("11D5E975F0A3EAA0F7843980B24771B3B255A1499281F455461CB291802429342619012B7A6EDE470E32F1C1CC5FA845"),
        m:  hex!("346A3BB4815FFB17A53B6A253325CF3DECC0AAAF7D53974125C90B68C7DB45CE0BA635C0EEEA80616AEE2AA7CE7966B4"),
        result: false,
    },
    EcdsaTestVec {
        qx: hex!("0CED3579939EE2DFCE586A88A08DA780F08E4B8AD36F9E087E39105D2DA3A628C301655CB0BE9F3646A10D09EC01DE3C"),
        qy: hex!("27E3930D153B9202AB3709F97342C4CCCF456D54F1847F55FD9FAAACE95823DDE03A619BA9C7F4A1B51BB994027BE678"),
        r:  hex!("8637948DCAF42CE1410A8A918DD41C324AF02ACC6517D262BA1A8C1FAE372475F4496E0E861C2F8F634CE088BC7FD51C"),
        s:  hex!("DDF9B8D0A5B1761CBEC6B67677169E8440AA23E50B23375BCDF35351E1EC9447040D890CFCBABE9700B8897C1F2C04F8"),
        m:  hex!("60A13BCEF15E5FD87DAB1BA5643226B078C756E99A29C0935C60F6646EEEF24B7E59ED04A794B77C20741B6F50C188F9"),
        result: true,
    },
    EcdsaTestVec {
        qx: hex!("0CED3579939EE2DFCE586A88A08DA780F08E4B8AD36F9E087E39105D2DA3A628C301655CB0BE9F3646A10D09EC01DE3C"),
        qy: hex!("27E3930D153B9202AB3709F97342C4CCCF456D54F1847F55FD9FAAACE95823DDE03A619BA9C7F4A1B51BB994027BE678"),
        r:  hex!("8637948DCAF42CE1410A8A918DD41C324AF02ACC6517D262BA1A8C1FAE372475F4496E0E861C2F8F634CE088BC7FD51C"),
        s:  hex!("DDF9B8D0A5B1761CBEC6B67677168E8440AA23E50B23375BCDF35351E1EC9447040D890CFCBABE9700B8897C1F2C04F8"),
        m:  hex!("60113BCEF15E5FD87DAB1BA5643216B078C756E99A29C0935C60F6646EEEF24B7E59ED04A794B77C20741B6F50C188F9"),
        result: false,
    },
];

pub fn run_ecdsa_tests(
    uart: &mut UartController,
    verifier: &mut impl EcdsaVerify<Secp384r1Curve, PublicKey = PublicKey, Signature = Signature>,
) {
    writeln!(uart, "\r\nRunning ECDSA test").unwrap();
    for (i, vec) in SECP384R1_TESTVEC.iter().enumerate() {
        let pubkey = PublicKey {
            qx: Scalar48(vec.qx),
            qy: Scalar48(vec.qy),
        };
        let sig = Signature {
            r: Scalar48(vec.r),
            s: Scalar48(vec.s),
        };
        let mut digest =
            <<Secp384r1Curve as Curve>::DigestType as DigestAlgorithm>::DigestOutput::default();
        digest.as_mut().copy_from_slice(&vec.m);

        let result = verifier.verify(&pubkey, digest, &sig);

        writeln!(uart, "\r\nTest case {}... ", i).unwrap();

        let _ = match (result.is_ok(), vec.result) {
            (true, true) => writeln!(uart, "\rresult expected (pass), Pass"),
            (false, false) => writeln!(uart, "\rresult expected (fail), Pass"),
            _ => writeln!(uart, "\rresult unexpected (got {:?}), Failed", result),
        };
    }
}
